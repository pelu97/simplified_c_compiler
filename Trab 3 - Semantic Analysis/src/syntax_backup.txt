listStatement:
    listAssign {
        $$ = $1;
    }
    | listMap {
        $$ = $1;
    }
    | listFilter {
        $$ = $1;
    }
;

listExpression:
    listHeader {
        $$ = $1;
    }
    /* | listTail {printf("%d\n", $1);} */
    | listTailDestructor {
        $$ = $1;
    }
;

listAssign:
    ID ASSIGN_OP ID ASSIGN_LISTOP ID {
        char* temp;

        /* temp = (char*) malloc(strlen($1.text) + strlen($3.text) + strlen($5.text) + strlen("List Assignment - ID1: ") + strlen(" - ID2: ") + strlen(" - ID3: ") + 3); */
        temp = (char*) malloc(strlen($1.text) + strlen($3.text) + strlen($5.text) + strlen("List Assignment - IDs: ") + 6);

        /* strcpy(temp, "List Assignment - ID1: ");
        strcat(temp, $1.text);
        strcat(temp, " - ID2: ");
        strcat(temp, $3.text);
        strcat(temp, " - ID3: ");
        strcat(temp, $5.text); */

        strcpy(temp, "List Assignment - IDs: ");
        strcat(temp, $1.text);
        strcat(temp, ", ");
        strcat(temp, $3.text);
        strcat(temp, ", ");
        strcat(temp, $5.text);

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listAssign");

        freeScopeToken($1.scope);
        freeScopeToken($3.scope);
        freeScopeToken($5.scope);
        free(temp);
    }
;

/* listHeader:
    HEADER_LISTOP ID {
        char* temp;

        temp = (char*) malloc(strlen($2.text) + strlen("List Header - ID: ") + 3);

        strcpy(temp, "List Header - ID: ");
        strcat(temp, $2.text);

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listHeader");

        freeScopeToken($2.scope);
        free(temp);
    }
; */

listHeader:
    HEADER_LISTOP simpleExpression {
        char* temp;

        temp = (char*) malloc(strlen("List Header") + 3);

        strcpy(temp, "List Header");
        /* strcpy(temp, "List Header - ID: "); */
        /* strcat(temp, $2.text); */

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listHeader");

        addChild($$, 1);

        $$->child[0] = $2;

        /* freeScopeToken($2.scope); */
        free(temp);
    }
;

/* listTail:
    EXCLA_OP ID {printf("%d %d\n", $1, $2);}
; */

listTailDestructor:
    TAILDES_LISTOP ID {
        char* temp;

        temp = (char*) malloc(strlen($2.text) + strlen("List Tail Destructor - ID: ") + 3);

        strcpy(temp, "List Tail Destructor - ID: ");
        strcat(temp, $2.text);

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listTailDest");

        freeScopeToken($2.scope);
        free(temp);
    }
;

listMap:
    ID ASSIGN_OP ID MAP_LISTOP ID {
        char* temp;

        temp = (char*) malloc(strlen($1.text) + strlen($3.text) + strlen($5.text) + strlen("List Map - IDs: ") + 6);

        strcpy(temp, "List Map - IDs: ");
        strcat(temp, $1.text);
        strcat(temp, ", ");
        strcat(temp, $3.text);
        strcat(temp, ", ");
        strcat(temp, $5.text);

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listMap");

        freeScopeToken($1.scope);
        freeScopeToken($3.scope);
        freeScopeToken($5.scope);
        free(temp);
    }
;

listFilter:
    ID ASSIGN_OP ID FILTER_LISTOP ID {
        char* temp;

        temp = (char*) malloc(strlen($1.text) + strlen($3.text) + strlen($5.text) + strlen("List Filter - IDs: ") + 6);

        strcpy(temp, "List Filter - IDs: ");
        strcat(temp, $1.text);
        strcat(temp, ", ");
        strcat(temp, $3.text);
        strcat(temp, ", ");
        strcat(temp, $5.text);

        temp = add_color(temp, COLOR_CYAN);

        $$ = createNode(temp, "listFilter");

        freeScopeToken($1.scope);
        freeScopeToken($3.scope);
        freeScopeToken($5.scope);
        free(temp);
    }
;
